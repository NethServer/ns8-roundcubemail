#!/usr/bin/env python3

# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#


import agent
import agent.tasks
import os
import sys
import json
import smtplib
import ssl


data = json.load(sys.stdin)


# Setup default values
smtp_server = data["smtp_server"]
smtp_port = data["smtp_port"]
encrypted_smtp = data["encrypted_smtp"]
tls_verify_smtp = data["tls_verify_smtp"]


# verify the hostname and the certificate
ctx = ssl.create_default_context()
if tls_verify_smtp:
    ctx.check_hostname = True
    ctx.verify_mode = ssl.CERT_REQUIRED
else:
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

try :
    if not encrypted_smtp:
        smtp = smtplib.SMTP(smtp_server, port=smtp_port, timeout=10)
    else:
        smtp = smtplib.SMTP_SSL(smtp_server, port=smtp_port, timeout=10, context=ctx)

except ssl.SSLCertVerificationError as err:
    agent.set_status('validation-failed')
    # the certificate is not valid probably self-signed or not valid for this hostname
    json.dump([{'field':'test_smtp','parameter':'test_smtp','value':err,'error':'valid_certificate_verification_error'}],fp=sys.stdout, default=str)
    sys.exit(1)

except Exception as err:
    agent.set_status('validation-failed')
    # generic failure we print the error
    json.dump([{'field':'test_smtp','parameter':'test_smtp','value':err,'error':'cannot_connect_to_server'}],fp=sys.stdout, default=str)
    sys.exit(2)
