#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import agent
import agent.tasks
import imaplib
import ssl

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Setup default values
mail_server = data["mail_server"]
imap_port = data["imap_port"]
encrypt_imap = data["encrypt_imap"]
tls_verify_imap = data["tls_verify_imap"]


# verify the hostname and the certificate
ctx = ssl.create_default_context()
if tls_verify_imap:
    ctx.check_hostname = True
    ctx.verify_mode = ssl.CERT_REQUIRED
else:
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

try :
    if encrypt_imap != 'tls':
        imap = imaplib.IMAP4(mail_server, port=imap_port, timeout=10)
    else:
        imap = imaplib.IMAP4_SSL(mail_server, port=imap_port, timeout=10, ssl_context=ctx)

except ssl.SSLCertVerificationError as err:
    agent.set_status('validation-failed')
    # the certificate is not valid probably self-signed or not valid for this hostname
    json.dump([{'field':'test_imap','parameter':'test_imap','value':err,'error':'valid_certificate_verification_error'}],fp=sys.stdout, default=str)
    sys.exit(1)

except Exception as err:
    agent.set_status('validation-failed')
    # generic failure we print the error
    json.dump([{'field':'test_imap','parameter':'test_imap','value':err,'error':'cannot_connect_to_server'}],fp=sys.stdout, default=str)
    sys.exit(2)
