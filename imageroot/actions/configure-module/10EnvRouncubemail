#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Setup default values
mail_server = data["mail_server"]
plugins = data.get("plugins",'archive,zipdownload')
upload_max_filesize = str(data.get("upload_max_filesize", '5')) + 'M'
imap_port = data["imap_port"]
smtp_port = data["smtp_port"]
starttls_imap = data["starttls_imap"]
starttls_smtp = data["starttls_smtp"]
encrypted_imap = data["encrypted_imap"]
encrypted_smtp = data["encrypted_smtp"]
tls_verify_imap = data["tls_verify_imap"]
tls_verify_smtp = data["tls_verify_smtp"]

if starttls_imap and encrypted_imap:
    agent.set_status('validation-failed')
    json.dump([{'field':'encryption_failure','parameter':'starttls_imap','value':'','error':'starttls_and_ecryption_cannot_be_true_together'}],fp=sys.stdout, default=str)
    sys.exit(1)

if starttls_smtp and encrypted_smtp:
    agent.set_status('validation-failed')
    json.dump([{'field':'encryption_failure','parameter':'starttls_smtp','value':'','error':'starttls_and_ecryption_cannot_be_true_together'}],fp=sys.stdout, default=str)
    sys.exit(1)

# cases following encryption or not
if starttls_imap:
    imap_server = 'tls://' + mail_server
elif encrypted_imap:
    imap_server = 'ssl://' + mail_server

if starttls_smtp:
    smtp_server = 'tls://' + mail_server
elif encrypted_smtp:
    smtp_server = 'ssl://' + mail_server


# Talk with agent using file descriptor.
# Setup configuration from user input.

agent.set_env("MAIL_SERVER", mail_server)
agent.set_env("ROUNDCUBEMAIL_DEFAULT_HOST", imap_server)
agent.set_env("ROUNDCUBEMAIL_SMTP_SERVER", smtp_server)
agent.set_env("ROUNDCUBEMAIL_PLUGINS", plugins)
agent.set_env("ROUNDCUBEMAIL_UPLOAD_MAX_FILESIZE", upload_max_filesize)
agent.set_env("ROUNDCUBEMAIL_DEFAULT_PORT", imap_port)
agent.set_env("ROUNDCUBEMAIL_SMTP_PORT", smtp_port)
agent.set_env("STARTTLS_SMTP", starttls_smtp)
agent.set_env("STARTTLS_IMAP", starttls_imap)
agent.set_env("ENCRYPTED_SMTP", encrypted_smtp)
agent.set_env("ENCRYPTED_IMAP", encrypted_imap)
agent.set_env("TLS_VERIFY_SMTP", tls_verify_smtp)
agent.set_env("TLS_VERIFY_IMAP", tls_verify_imap)

# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()
